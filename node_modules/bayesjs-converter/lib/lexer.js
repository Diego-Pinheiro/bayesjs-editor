"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var regexWhitespace = /\s/;
var regexNumber = /[0-9]/;
var regexIdentifier = /[a-z0-9_]/i;
exports.default = function (source) {
    var tokens = [];
    source = source.replace(/\\303\\243/g, 'Ã£');
    var currentIndex = 0;
    while (currentIndex < source.length) {
        var char = source[currentIndex];
        if (char === '%') {
            while (char !== '\n') {
                char = source[++currentIndex];
            }
            continue;
        }
        if (char === '=') {
            tokens.push({ type: 'equal' });
            currentIndex++;
            continue;
        }
        if (char === ';') {
            tokens.push({ type: 'semicolon' });
            currentIndex++;
            continue;
        }
        if (char === '|') {
            tokens.push({ type: 'pipe' });
            currentIndex++;
            continue;
        }
        if (char === '(') {
            tokens.push({ type: 'openparen' });
            currentIndex++;
            continue;
        }
        if (char === ')') {
            tokens.push({ type: 'closeparen' });
            currentIndex++;
            continue;
        }
        if (char === '{') {
            tokens.push({ type: 'openbracket' });
            currentIndex++;
            continue;
        }
        if (char === '}') {
            tokens.push({ type: 'closebracket' });
            currentIndex++;
            continue;
        }
        if (regexWhitespace.test(char)) {
            currentIndex++;
            continue;
        }
        if (char === '"') {
            var value = '';
            char = source[++currentIndex];
            while (char !== '"') {
                value += char;
                char = source[++currentIndex];
            }
            tokens.push({ type: 'string', value: value });
            currentIndex++;
            continue;
        }
        if (regexNumber.test(char)) {
            var value = '';
            var foundDecimalSeparator = false;
            while (regexNumber.test(char) ||
                (char === '.' && foundDecimalSeparator === false)) {
                if (char === '.') {
                    foundDecimalSeparator = true;
                }
                value += char;
                char = source[++currentIndex];
            }
            tokens.push({ type: 'number', value: parseFloat(value) });
            continue;
        }
        if (regexIdentifier.test(char)) {
            var value = '';
            while (regexIdentifier.test(char)) {
                value += char;
                char = source[++currentIndex];
            }
            switch (value) {
                case 'net':
                    tokens.push({ type: 'net' });
                    break;
                case 'node':
                    tokens.push({ type: 'node' });
                    break;
                case 'potential':
                    tokens.push({ type: 'potential' });
                    break;
                default:
                    tokens.push({ type: 'identifier', value: value });
                    break;
            }
            continue;
        }
        throw new Error("Unexpected character: " + char);
    }
    return tokens;
};
